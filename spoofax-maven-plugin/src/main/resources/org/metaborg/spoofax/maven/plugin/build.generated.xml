<?xml version="1.0" encoding="UTF-8"?>
<project name="build.generated">

	<target name="spoofaximp.default" depends="spoofaximp.default.ctree" />
	<target name="spoofaximp.default.ctree" depends="
                        check-classpath,
                        sdf2table,
                        meta-sdf2table,
                        ppgen,
                        pppack,
                        sdf2imp.standalone,
                        sdf2parenthesize,
                        stratego.aster,
                        stratego.ctree,
                        compile-java-files,
                        java.jar" />
    <target name="spoofaximp.default.jar" depends="
                        check-classpath,
                        sdf2table,
                        meta-sdf2table,
                        ppgen,
                        pppack,
                        sdf2imp.standalone,
                        sdf2parenthesize,
                        stratego.aster,
                        call.stratego.jar,
                        compile-java-files,
                        stratego.jar.makejar,
                        java.jar" />
	
	<!-- Importing Ant Macros -->
	<taskdef resource="org/strategoxt/antcontrib/strategoxt-antlib.xml" classpath="${plugin.classpath}"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${plugin.classpath}"/>
	
    <target name="generate-sources-jar" depends="check-classpath, sdf2table, meta-sdf2table, ppgen, pppack,
        sdf2imp.standalone, sdf2parenthesize, stratego.aster, call.stratego.jar" />
    <target name="package-jar" depends="stratego.jar.makejar, java.jar" />

    <target name="generate-sources-ctree" depends="check-classpath, sdf2table, meta-sdf2table, ppgen, pppack,
        sdf2imp.standalone, sdf2parenthesize, stratego.aster, stratego.ctree" />
    <target name="package-ctree" depends="java.jar" />

	<!-- Initialization -->
	<available file="${src-gen}/${lang.name}/strategies/Main.java" property="java.jar.enabled" />
	<available file="${pp}/${ppmodule}.str" property="pp.module.enabled" />
	<condition property="java.jar.import" value="-la ${lang.name}.strategies" else="">
		<isset property="java.jar.enabled" />
	</condition>
	<condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
		<isset property="java.jar.enabled" />
	</condition>
	<available file="${trans}/${strmodule}.str" property="build.stratego.enabled" />
	<dirname property="externaldefdir" file="${externaldef}" />
	<condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
		<isset property="externaldef" />
	</condition>
	<condition property="externaljarimport1" value=":${externaljar}" else="">
		<isset property="externaljar" />
	</condition>
	<condition property="externaljarimport2" value=":${externaljarx}" else="">
		<isset property="externaljarx" />
	</condition>
	<condition property="externaljarflags" value="${externaljarflags}" else="">
		<isset property="externaljarflags" />
	</condition>
	<condition property="metasdfmodule.available" value="1">
		<available file="${syntax}/${metasdfmodule}.sdf" />
	</condition>
	<condition property="src-dirs" value="${src-dirs}" else="${src-gen}">
		<isset property="src-dirs" />
	</condition>
	 <condition property="javajar-includes" value="${javajar-includes}" else="${lang.name}/strategies/">
    <isset property="javajar-includes" />
  </condition>

	<fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually" />
	<mkdir dir="${build}" />
	<mkdir dir="${src-gen}" />
	<mkdir dir="${include}" />
	<mkdir dir="${lib}" />
	<mkdir dir="${syntax}" />

	<target name="sdf2imp" depends="sdf2imp.standalone,sdf2parenthesize" />

    <target name="check-classpath">
        <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available" />
        <antcall target="check-classpath.helper" />
    </target>

    <target name="check-classpath.helper" unless="check-classpath.available">
        <echo level="error" message="Could not load the Spoofax classes." />
        <echo level="error" message="Make sure it is on the class path." />
        <fail message=""/>
    </target>

	<target name="sdf2imp.standalone" depends="sdf2rtg">
		<java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
			<arg value="-i" />
			<arg value="${basedir}/editor/${esvmodule}.main.esv" />
			<arg value="-p" />
			<arg value="${include}/${sdfmodule}.tbl" />
			<arg value="-pn" />
			<arg value="${lang.name}" />
			<arg value="-mvn" />
		</java>
	</target>

	<!-- Copy sdf2 files from the syntax folder into the src-gen/syntax folder  -->
	<target name="copy-sdf2">
	  <copy preservelastmodified="yes" todir="src-gen/syntax" failonerror="false">
	    <fileset dir="${basedir}/syntax" includes="**/*.sdf"/>
	  </copy>
	</target>

	<target name="sdf2table" depends="make-permissive">
		<for param="input">
			<path>
				<fileset dir="${include}" includes="*-Permissive.def"/>
			</path>
			<sequential>
				<local name="input-basename"/>
				<basename file="@{input}" property="input-basename" suffix="-Permissive.def"/>
				<sdf2table input="@{input}" main="${sdfmodule}" output="${include}/${input-basename}.tbl"/>
			</sequential>
		</for>
	</target>

	<target name="meta-sdf2table" if="metasdfmodule.available">
		<antcall target="sdf2table">
			<param name="sdfmodule" value="${metasdfmodule}" />
			<param name="build.sdf.imports" value="-Idef &quot;${distpath}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
	</target>

	<target name="make-permissive" depends="pack-sdf, copy-sdf" >
		<make-permissive input="${include.rel}/${sdfmodule}.def" output="${include.rel}/${sdfmodule}-Permissive.def">
			<permissiveargs>	
				<arg line="--optimize on"/>
			</permissiveargs>
		</make-permissive>
	</target>

	<target name="pack-sdf" unless="externaldef" depends="copy-sdf2">
		<pack-sdf input="${syntax.rel}/${sdfmodule}.sdf" output="${include.rel}/${sdfmodule}.def">
			<sdf-deps>
				<srcfiles dir="${basedir}" includes="**/*.sdf"/>
				<srcfiles dir="${lib}" includes="**/*.def"/>
				<srcfiles dir="${include}" includes="${sdfmodule}.def"/> 
			</sdf-deps>
		
			<args>
				<arg value="-I"/>
				<arg value="${syntax}"/>
				<arg value="-I"/>
				<arg value="${lib}"/>
				<arg line="${build.sdf.imports}"/>
			</args>
		</pack-sdf>
	</target>

	<target name="copy-sdf" if="externaldef">
		<copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true" />
	</target>

	<target name="copy-jar" if="externaljar">
		<copy file="${externaljar}" todir="${include}" preservelastmodified="true" />
	</target>

	<target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
	   <trycatch>
		   <try>
			   	<sdf2parenthesize input="${include.rel}/${sdfmodule}.def" language="${sdfmodule}" main="${sdfmodule}" output="${include.rel}/${sdfmodule}-parenthesize.str" outputmodule="include/${sdfmodule}-parenthesize">
				<args>
					<arg value="--main-strategy"/>
					<arg value="io-${sdfmodule}-parenthesize"/>
					<arg value="--rule-prefix"/>
					<arg value="${sdfmodule}"/>
					<arg value="--sig-module"/>
					<arg value="${lib-gen.rel}/${sdfmodule}"/>
				</args>
				</sdf2parenthesize>
			</try>
			<catch>
			    <echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id" />
			</catch>
		</trycatch>
	</target>

	<target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
		<dependset>
			<srcfileset file="${syntax}/${sdfmodule}.pp" />
			<targetfileset file="${include}/${sdfmodule}.pp.af" />
		</dependset>
		<available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available" />
		<available file="${include}/${sdfmodule}.pp.af" property="pppack.available" />
		<antcall target="pppack.helper" />
		<available file="${include}/${sdfmodule}.pp.af" property="pppack.available" />
		<antcall target="pppack.helper.fallback" />
	</target>

	<target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
		<java classname="run" failonerror="true">
			<arg value="org.strategoxt.tools.main-parse-pp-table" />
			<arg value="-i" />
			<arg value="${syntax}/${sdfmodule}.pp" />
			<arg value="-o" />
			<arg value="${include}/${sdfmodule}.pp.af" />
		</java>
	</target>

	<target name="pppack.helper.fallback" unless="pppack.available">
		<echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])" />
	</target>
	
	<!-- Target to create library from generated signatures -->
    <target name="sig.lib" unless="pp.module.enabled">
        
        <available file="${src-gen}/${lang.name.small}/siglib/Main.java" property="sig-java.available" />
        <antcall target="sig.lib.deletehelper" />
        
        <mkdir dir="${src-gen}/${lang.name.small}/siglib"/>
        
        <strj input="${include}/${sdfmodule}.str" output="${src-gen}/${lang.name.small}/siglib/Main.java" package="${lang.name.small}.siglib" >
                    <strjargs> 
                        <arg value="--clean"/>
                        <arg line="-la ${lang.name.small}.siglib -I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
                        <arg value="--library"/>
                    </strjargs>
                    <str-deps>
                        <srcfiles dir="${include}" includes="${sdfmodule}.str"/>
                    </str-deps>
                </strj>
                
        <mkdir dir="${build}/${lang.name.small}/siglib"/>
        
        <sequential>
            <uptodate-mio input="${src-gen}/${lang.name.small}/siglib/Main.java" output="${lib-gen}/${sdfmodule}-lib.jar" type="javac">
                <action>
                    <javac fork="true" debug="on" destdir="${build}" includes="${lang.name.small}/siglib/**" source="1.7" srcdir="${src-gen}" target="1.7">
                        <classpath>
                            <pathelement path="${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" />
                        </classpath>
                    </javac>
                    <!-- copy imported terms -->
                    <copy todir="${build}/${lang.name.small}/siglib">
                            <fileset dir="${src-gen}/${lang.name.small}/siglib" excludes="**/*.java"/>
                    </copy>
                    <copy file="${src-gen}/${lang.name.small}/siglib/Main.rtree" tofile="${lib-gen}/${sdfmodule}-lib.rtree" />
                    <jar basedir="${build}" destfile="${lib-gen}/${sdfmodule}-lib.tmp.jar" includes="${lang.name.small}/siglib/**"/>
                    <move file="${lib-gen}/${sdfmodule}-lib.tmp.jar" tofile="${lib-gen}/${sdfmodule}-lib.jar"/>
                    <delete>
                        <fileset dir="${build}" includes="${lang.name.small}/siglib/**"/>
                    </delete> 
                </action>
                <deps>
                    <srcfiles dir="${src-gen}/${lang.name.small}/siglib/" includes="**/*.java"/>
                </deps>
            </uptodate-mio>
        </sequential>
        
    </target>
    
    <target name="sig.lib.deletehelper" unless="sig-java.available">
        <delete>
            <fileset dir="${src-gen}" includes="${lang.name.small}/siglib/**"/>
            <fileset dir="${build}" includes="${lang.name.small}/siglib/**"/>
        </delete>
    </target>
	
	<!-- Target to create jar from generated pp and signatures -->
	<target name="pp.lib" if="pp.module.enabled">
		
		<available file="${src-gen}/${lang.name.small}/pplib/Main.java" property="pp-java.available" />
        <antcall target="pp.lib.deletehelper" />
        
        <mkdir dir="${src-gen}/${lang.name.small}/pplib"/>
        
        <strj input="${pp}/${ppmodule}.str" output="${src-gen}/${lang.name.small}/pplib/Main.java" package="${lang.name.small}.pplib" >
                    <strjargs> 
                        <arg value="--clean"/>
                        <arg line=" --library -I &quot;${basedir}&quot; -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm -la stratego-sdf -la strc" />
                        <arg line="-la java-front ${java.jar.import} -la ${lang.name.small}.pplib" />
                        <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
                        <arg value="--library"/>
                    </strjargs>
                    <str-deps>
                        <srcfiles dir="${pp}" includes="**/*.str"/>
                        <srcfiles dir="${signatures}" includes="**/*.str"/>
                    </str-deps>
                </strj>
        
        <mkdir dir="${build}/${lang.name.small}/pplib"/>
        
        <sequential>
            <uptodate-mio input="${src-gen}/${lang.name.small}/pplib/Main.java" output="${lib-gen}/${sdfmodule}-lib.jar" type="javac">
                <action>
                    <javac fork="true" debug="on" destdir="${build}" includes="${lang.name.small}/pplib/**" source="1.7" srcdir="${src-gen}" target="1.7">
                        <classpath>
                            <pathelement path="${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" />
                        </classpath>
                    </javac>
                    <!-- copy imported terms -->
                    <copy todir="${build}/${lang.name.small}/pplib">
                            <fileset dir="${src-gen}/${lang.name.small}/pplib" excludes="**/*.java"/>
                    </copy>
                    <copy file="${src-gen}/${lang.name.small}/pplib/Main.rtree" tofile="${lib-gen}/${sdfmodule}-lib.rtree" />
                    <jar basedir="${build}" destfile="${lib-gen}/${sdfmodule}-lib.tmp.jar" includes="${lang.name.small}/pplib/**"/>
                    <move file="${lib-gen}/${sdfmodule}-lib.tmp.jar" tofile="${lib-gen}/${sdfmodule}-lib.jar"/>
                    <delete>
                        <fileset dir="${build}" includes="${lang.name.small}/pplib/**"/>
                    </delete> 
                </action>
                <deps>
                    <srcfiles dir="${src-gen}/${lang.name.small}/pplib/" includes="**/*.java"/>
                </deps>
            </uptodate-mio>
        </sequential>
	
	</target>
	
	<target name="pp.lib.deletehelper" unless="pp-java.available">
        <delete>
            <fileset dir="${src-gen}" includes="${lang.name.small}/pplib/**"/>
            <fileset dir="${build}" includes="${lang.name.small}/pplib/**"/>
        </delete>
    </target>
	
	<!-- SDF2 old tools -->
	<target name="rtg2sig" if="build.stratego.enabled" >
	    <rtg2sig input="${include.rel}/${sdfmodule}.rtg" output="${include.rel}/${sdfmodule}.str" main="${sdfmodule}" />
    </target>

    <target name="sdf2rtg">
        <sdf2rtg input="${include.rel}/${sdfmodule}.def" output="${include.rel}/${sdfmodule}.rtg" main="${sdfmodule}" />
    </target>

    <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf" >
        <ppgen input="${include.rel}/${sdfmodule}.def" output="${include.rel}/${sdfmodule}.generated.pp" />
        <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available" />
        <antcall target="ppgen.helper.fallback" />
    </target>

    <target name="ppgen.helper.fallback" unless="ppgen.available">
        <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])" />
    </target>
    
	<!-- Aster to Stratego -->
	<target name="stratego.aster">
		<available file="${trans}/${strmodule}.rtree" property="aster-output.available" />
		<fileset dir="${basedir}" id="aster-input-set">
			<include name="**/*.astr" />
		</fileset>
		<pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set" />
		<dependset>
			<srcfileset dir="${basedir}">
				<include name="**/*.astr" />
			</srcfileset>
			<targetfileset file="${trans}/${strmodule}.rtree" />
		</dependset>
		<condition property="aster-output.uptodate">
			<and>
				<isset property="aster-output.available" />
				<available file="${trans}/${strmodule}.rtree" />
			</and>
		</condition>
		<available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate" />
		<antcall target="stratego.aster.helper" />
	</target>

	<target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
		<java classname="org.strategoxt.aster.Main" failonerror="true">
			<arg value="-i" />
			<arg line="${aster-input}" />
		</java>
	</target>

	<target name="compile-java-files">
		<delete dir="${build}" />
		<mkdir dir="${build}" />
		<javac fork="true" srcdir="${src-dirs}" destdir="${build}" source="1.7" target="1.7" debug="on">
			<classpath>
				<pathelement path="${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" />
			</classpath>
		</javac>
	</target>

	<target name="java.jar" if="java.jar.enabled">
	    <delete file="${include}/${strmodule}-java.jar" failonerror="false" />
		<jar basedir="${build}" includes="${javajar-includes}" update="true" destfile="${include}/${strmodule}-java.jar" />
	</target>

	<!-- Stratego to Java interpreter -->
	<target name="stratego.ctree" depends="rtg2sig">
		<fail message="Main stratego file '${strmodule}.str' not found.">
			<condition>
				<not>
					<isset property="build.stratego.enabled" />
				</not>
			</condition>
		</fail>
		<dependset>
			<srcfileset dir="${basedir}">
				<include name="**/*.str" />
				<include name="**/*.astr" />
				<exclude name="lib/*.generated.str" />
			</srcfileset>
			<targetfileset file="${include}/${strmodule}.ctree" />
		</dependset>
		<available file="${include}/${strmodule}.ctree" property="strc-java.available" />
		<antcall target="copy-jar" />
		<antcall target="stratego.jvm.helper">
			<param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree" />
			<param name="build.stratego.extraargs" value="-F" />
		</antcall>
	</target>

	<!-- Stratego to Java compiler -->
	<target name="stratego.jar" depends="rtg2sig">
		<fail message="Main stratego file '${strmodule}.str' not found.">
			<condition>
				<not>
					<isset property="build.stratego.enabled" />
				</not>
			</condition>
		</fail>
		<dependset>
			<srcfileset dir="${basedir}">
				<include name="**/*.str" />
				<include name="**/*.astr" />
				<exclude name="lib/*.generated.str" />
			</srcfileset>
			<targetfileset file="${src-gen}/trans/Main.java" />
		</dependset>
		<available file="${src-gen}/trans/Main.java" property="strc-java.available" />
		<antcall target="copy-jar" />
		<delete>
			<fileset dir="${src-gen}" includes="trans/**" />
		</delete>
		<antcall target="stratego.jvm.helper">
			<param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java" />
			<param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}" />
		</antcall>
	</target>

	<target name="stratego.jar.makejar">
		<!-- copy imported terms -->
		<copy todir="${build}/trans">
			<fileset dir="${src-gen}/trans" excludes="**/*.java" />
		</copy>
		<jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar" />
		<move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar" />
	</target>

	<target name="stratego.jar.deletehelper" unless="strc-java.available">
		<delete>
			<fileset dir="${src-gen}" includes="trans/**" />
			<fileset dir="${build}" includes="trans/**" />
		</delete>
	</target>

	<target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
		<delete file="${include}/${strmodule}.rtree" failonerror="false" />
		<java classname="org.strategoxt.strj.Main" failonerror="true">
			<arg value="-i" />
			<arg value="${trans}/${strmodule}.str" />
			<arg value="-o" />
			<arg value="${build.stratego.outputfile}" />
			<arg value="-p" />
			<arg value="trans" />
			<arg value="--library" />
			<arg value="--clean" />
			<arg line="${build.stratego.args}" />
			<arg line="${build.stratego.extraargs}" />
			<arg line="${externaljarflags}" />
			<arg line="${externaldefimport}" />
			<arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
		</java>
		<delete file="${include}/${strmodule}.rtree" failonerror="false" />
	</target>

	<!-- call stratego.jar unless debug.build.enabled property is set -->
	<target name="call.stratego.jar" depends="stratego.jar">
		<echo message="call.stratego.jar" />
	</target>

	<!-- Stratego to C-based native executable -->
	<target name="stratego.c">
		<antcall target="stratego.c.helper">
			<param name="build.stratego.outputpath" value="${basedir}/include" />
			<param name="build.stratego.extraargs" value="" />
			<param name="build.stratego.extension" value="" />
			<param name="build.stratego.compiler" value="strc" />
		</antcall>
	</target>

	<!-- Helper target for calling the stratego compiler -->
	<target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
		<apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
			<arg value="-i" />
			<srcfile />
			<arg value="-o" />
			<targetfile />
			<arg line="${build.stratego.args}" />
			<arg line="${build.stratego.extraargs}" />
			<arg line="${externaldefimport}" />
			<arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />

			<fileset file="${trans}/${strmodule}.str" />
			<mapper type="glob" from="*.str" to="*.${build.stratego.extension}" />
		</apply>
	</target>

	<target name="clean" description="Clean project">
        <delete dir="${build}" failonerror="false" />
        <delete dir=".cache" failonerror="false" />
        <delete file="${include}/${sdfmodule}.def" failonerror="false" />
        <delete file="${include}/${sdfmodule}-parenthesize.str" failonerror="false" />
        <delete file="${include}/${sdfmodule}-Permissive.def" failonerror="false" />
        <delete file="${include}/${sdfmodule}.generated.pp" failonerror="false" />
        <delete file="${include}/${sdfmodule}.generated.pp.af" failonerror="false" />
        <delete file="${include}/${sdfmodule}.packed.esv" failonerror="false" />
        <delete file="${include}/${sdfmodule}.pp.af" failonerror="false" />
        <delete file="${include}/${sdfmodule}.rtg" failonerror="false" />
        <delete file="${lib-gen}/${ppmodule}.jar" failonerror="false" />
        <delete file="${lib-gen}/${ppmodule}.rtree" failonerror="false" />
        <delete file="${lib-gen}/${sigmodule}.str" failonerror="false" />
        <delete file="${lib-gen}/${sigmodule}.ctree" failonerror="false" />
        <delete file="${lib-gen}/${sigmodule}.rtree" failonerror="false" />
        <delete file="${lib-gen}/${sigmodule}.ctree.dep" failonerror="false" />
        <delete file="${lib-gen}/${sdfmodule}-lib.jar" failonerror="false" />
        <delete file="${lib-gen}/${sdfmodule}-lib.rtree" failonerror="false" />
        <delete file="${include}/${sdfmodule}.str" failonerror="false" />
        <delete file="${include}/${sdfmodule}.tbl" failonerror="false" />
        <delete file="${include}/${strmodule}.rtree" failonerror="false" />
        <delete file="${include}/${strmodule}.ctree" failonerror="false" />
        <delete file="${include}/${strmodule}.ctree.dep" failonerror="false" />
        <delete file="${include}/${strmodule}.jar" failonerror="false" />
        <delete dir="${src-gen}/trans" failonerror="false" />
        <delete dir="${src-gen}/${lang.name.small}/pplib" failonerror="false" />
        <delete dir="${src-gen}/${lang.name.small}/siglib" failonerror="false" />
        <delete file="${syntax}/${sdfmodule}.generated.esv" failonerror="false" />
        <delete file="${syntax}/${sdfmodule}.generated.pp" failonerror="false" />
        <delete file="${include}/${metasdfmodule}-Permissive.def" failonerror="false" />
        <delete file="${include}/${metasdfmodule}.def" failonerror="false" />
        <delete file="${include}/${metasdfmodule}.tbl" failonerror="false" />
        <delete failonerror="false">
            <fileset dir="${sdf-src-gen}" erroronmissingdir="false" />
        </delete>
        <delete failonerror="false">
            <fileset dir="${lib}" includes="*.generated.str" erroronmissingdir="false" />
        </delete>
    </target>

</project>
